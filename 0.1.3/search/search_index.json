{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RustBag","text":"<p>RustBag is a yet another ROSBag reader. It's main feature is the ability to read directly from an Object Storage, like AWS S3. Additionally, it is fast, with speeds somewhere in between rosbags and embag.</p> <p>Warning</p> <p>RustBag is still in development. While the basic functionality (reading bags) is provided, there are still feature, documentation, and performance improvements that we want to add before making a full release.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>See Getting Started page</p>"},{"location":"#issues","title":"Issues","text":"<p>If you have a feature request, or a suggestion please open an issue.</p>"},{"location":"#related-projects","title":"Related Projects","text":"<p>While I do hope that RustBag can be widely adopted, here are alternative bag readers that perform well in my opinion:</p> <ul> <li>embag - By far the fastest local rosbag reading library. Warning: might be stale and it does suffer from some memory leaks that I have not been able to identify, when working with many bags.</li> <li>rosbags - Probably the most stable/bug-free implementation of rosbag reading. Supports many robotics data formats. It's on little slower side when working with remote bags, but still good experience.</li> </ul> <p>Other ROS + Rust projects that were inspiration for this code:</p> <ul> <li>rosrust - Specifically ros_message crate, which ros_msg crate in this repo is loosely based off of (it's really a mix of this crate and embag parser).</li> <li>rosbag-rs - Pure Rust ROSBag reader. Does not appear finished, but also influenced overall design of code.</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>Available on PyPI: <code>pip install rustbag</code>. To run below examples you will also need tqdm for a neat progress bar (<code>pip install tqdm</code>).</p>"},{"location":"getting_started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting_started/#reading-a-local-file","title":"Reading a local file","text":"<pre><code>from rustbag import Bag\nimport tqdm\n\n\npath = Path(\"&lt;bag-path&gt;.bag\")\nbag = Bag(f\"file://{str(path.absolute())}\")\nfor msg in tqdm.tqdm(bag.read_messages(), desc=\"rs\", total=bag.num_messages()):\n    pass\n</code></pre>"},{"location":"getting_started/#reading-a-file-from-local-s3-deployment","title":"Reading a file from local S3 deployment","text":"<p>It is recommended to be read a bag through a wired interface due to lower latency, higher bandwidth and more stable connection.</p> <pre><code>from rustbag import Bag\nimport tqdm\n\nbag_name = \"&lt;bag-path&gt;.bag\"\nbag = Bag(f\"s3://&lt;bucket-name&gt;/{bag_name}\", {\n    # NOTE: Replace below with actual values, or checkout benchmarks/ folder on GitHub for standing up playground MinIO\n    \"endpoint\": \"http://localhost:9000\",\n    \"access_key_id\": \"minioadmin\",\n    \"secret_access_key\": \"minioadmin\",\n    \"allow_http\": \"true\",\n})\nfor msg in tqdm.tqdm(bag.read_messages(), desc=\"rs\", total=bag.num_messages()):\n    pass\n</code></pre>"},{"location":"getting_started/#reading-a-file-from-aws-s3-deployment","title":"Reading a file from AWS S3 deployment","text":"<p>It is recommended to be read a bag through a wired interface due to lower latency, higher bandwidth and more stable connection.</p> <p>Warning</p> <p>I do not recommend reading bags directly from AWS (or other cloud provider) like this due to significantly higher costs, then just downloading and reading the bag from a local machine. This is NOT what RustBag was designed to do.</p> <pre><code>from rustbag import Bag\nimport tqdm\n\nbag_name = \"&lt;bag-path&gt;.bag\"\nbag = Bag(f\"s3://bucket-name/{bag_name}\", {\n    # NOTE: Replace below with actual values\n    \"access_key_id\": \"&lt;grab-from-aws&gt;\",\n    \"secret_access_key\": \"&lt;grab-from-aws&gt;\",\n})\nfor msg in tqdm.tqdm(bag.read_messages(), desc=\"rs\", total=bag.num_messages()):\n    pass\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Jakub Filipek jfilipek@proton.me</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"performance/","title":"Performance","text":"<p>To provide transparency, here are benchmarks for rustbag and alternatives. Since rustbag is still in alpha, without fully developed feature set (check roadmap), there will not be a lot of focus put into improving these values in short term. However, in-long term, I hope this page to provide in-depth understanding of pros and cons of each of the rosbag/mcap readers.</p>"},{"location":"performance/#local-machine","title":"Local machine","text":""},{"location":"performance/#rellis-3d-20210828_2bag-29gb","title":"Rellis-3D (20210828_2.bag; 2.9GB)","text":"library time taken iterations/second rustbag 00:07 2514.72 rosbags 00:08 2239.63 embag 00:07 2318.10 rosbag 00:09 1836.96"},{"location":"performance/#rellis-3d-20210828_15bag-17gb","title":"Rellis-3D (20210828_15.bag; 17GB)","text":"library time taken iterations/second rustbag 00:50 2055.44 rosbags 00:58 1750.83 embag 01:01 1676.42 rosbag 01:43 989.70"},{"location":"performance/#udacity-hmb_1bag-672mb","title":"Udacity (HMB_1.bag; 672MB)","text":"library time taken iterations/second rustbag 00:07 116281.31 rosbags 00:17 51035.87 embag 00:02 366963.75 rosbag 00:20 45357.38"},{"location":"performance/#bag-from-docker-container-on-same-machine","title":"Bag from docker container on same machine","text":""},{"location":"performance/#rellis-3d-20210828_2bag-29gb_1","title":"Rellis-3D (20210828_2.bag; 2.9GB)","text":"library time taken iterations/second rustbag 00:08 2214.61 rosbags 00:43 417.09 embag 00:48 375.47 rosbag 00:29 627.79"},{"location":"performance/#udacity-hmb_1bag-672mb_1","title":"Udacity (HMB_1.bag; 672MB)","text":"library time taken iterations/second rustbag 00:11 80168.29 rosbags 00:18 49279.25 embag 00:04 209895.66 rosbag 00:21 42965.35"},{"location":"roadmap/","title":"Roadmap","text":"<p>Following are tasks (in order of priority that we want to focus on):</p> <ol> <li>Testing harness - Test harness for Rust side of implementation. This is mostly meant for unit testing, since integration will be done on python side (see below). Also, includes documenting internal crates.</li> <li>Correctness/Reliability - Automated integration test that verify correctness of implementation and returned messages against rosbags</li> <li>Rust crate publishing</li> <li>Python API completeness - Exposing more information to the user. Specifically:</li> <li>topics - which lists all of topics, with basic metadata</li> <li>connections - which returns a dictionary from topic to (possibly many) connections</li> <li>types - which returns a MsgType style tree</li> <li>Optimize performance - The code is inefficient, mostly due to my lack of Rust and PyO3 knowledge. I would like to try to squeeze performance, especially from the Python/Rust interface, which involves a lot of <code>clone</code>s.</li> <li>MCap implementation - Extending this library to also read .mcap files. If there are other reasonable ROS2 alternatives I can try to hook into them as well.</li> <li>Msg Index Cache - Caching index of messages (either locally or in a bucket, if write perms allow and user permits) for improved later throughput.</li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>rustbag<ul> <li>rustbag</li> </ul> </li> </ul>"},{"location":"reference/rustbag/","title":"rustbag","text":""},{"location":"reference/rustbag/#rustbag.Bag","title":"<code>Bag(bag_uri, storage_options=None)</code>","text":"<p>Creates a new Bag object from a URI.</p> <p>Parameters:</p> Name Type Description Default <code>bag_uri</code> <code>str</code> <p>A URI string pointing to a bag, should start with either: - \"file://\" - \"http://\" - \"https://\"</p> required <code>storage_options</code> <code>Optional[Dict[str, str]]</code> <p>Storage options to use when reading URI. For allowed keys/values see object_store docs (or similar page for non-S3 storage). Defaults to None, i.e. default object store configuration is used.</p> <code>None</code>"},{"location":"reference/rustbag/#rustbag.Bag.num_messages","title":"<code>num_messages()</code>","text":"<p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of messages in a bag</p>"},{"location":"reference/rustbag/#rustbag.Bag.read_messages","title":"<code>read_messages(topics=None, start=None, end=None, config=None)</code>","text":"<p>Reads messages from the bag. Messages are almost guaranteed to be ordered in time.</p> <p>Parameters:</p> Name Type Description Default <code>topics</code> <code>Optional[List[str]]</code> <p>Topics to include. If not specified all topics are included. If topic is specified, but does not exists an error is raised. Defaults to None (all topics).</p> <code>None</code> <code>start</code> <code>Optional[int]</code> <p>Time at which to start reading. Defaults to None (start of the bag).</p> <code>None</code> <code>end</code> <code>Optional[int]</code> <p>Time at which to stop reading. Defaults to None (end of the bag).</p> <code>None</code> <code>config</code> <code>Optional[Dict[str, str]]</code> <p>Configuration of the reader. Currently allowed keys are: \"num_threads\". Defaults to None (Default configuration).</p> <code>None</code> <p>Yields:</p> Name Type Description <code>Iterator</code> <code>Iterator</code> <p>Iterator through tuples of:</p> <ol> <li>int - timestamp of message (according to bag, not from header)</li> <li>int - connection id</li> <li>MsgValue - deserialized message object</li> </ol>"},{"location":"reference/rustbag/rustbag/","title":"rustbag","text":""},{"location":"reference/rustbag/rustbag/#rustbag.rustbag.Bag","title":"<code>Bag(bag_uri, storage_options=None)</code>","text":"<p>Creates a new Bag object from a URI.</p> <p>Parameters:</p> Name Type Description Default <code>bag_uri</code> <code>str</code> <p>A URI string pointing to a bag, should start with either: - \"file://\" - \"http://\" - \"https://\"</p> required <code>storage_options</code> <code>Optional[Dict[str, str]]</code> <p>Storage options to use when reading URI. For allowed keys/values see object_store docs (or similar page for non-S3 storage). Defaults to None, i.e. default object store configuration is used.</p> <code>None</code>"},{"location":"reference/rustbag/rustbag/#rustbag.rustbag.Bag.num_messages","title":"<code>num_messages()</code>","text":"<p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of messages in a bag</p>"},{"location":"reference/rustbag/rustbag/#rustbag.rustbag.Bag.read_messages","title":"<code>read_messages(topics=None, start=None, end=None, config=None)</code>","text":"<p>Reads messages from the bag. Messages are almost guaranteed to be ordered in time.</p> <p>Parameters:</p> Name Type Description Default <code>topics</code> <code>Optional[List[str]]</code> <p>Topics to include. If not specified all topics are included. If topic is specified, but does not exists an error is raised. Defaults to None (all topics).</p> <code>None</code> <code>start</code> <code>Optional[int]</code> <p>Time at which to start reading. Defaults to None (start of the bag).</p> <code>None</code> <code>end</code> <code>Optional[int]</code> <p>Time at which to stop reading. Defaults to None (end of the bag).</p> <code>None</code> <code>config</code> <code>Optional[Dict[str, str]]</code> <p>Configuration of the reader. Currently allowed keys are: \"num_threads\". Defaults to None (Default configuration).</p> <code>None</code> <p>Yields:</p> Name Type Description <code>Iterator</code> <code>Iterator</code> <p>Iterator through tuples of:</p> <ol> <li>int - timestamp of message (according to bag, not from header)</li> <li>int - connection id</li> <li>MsgValue - deserialized message object</li> </ol>"}]}